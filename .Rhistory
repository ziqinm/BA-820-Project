summary(train_orig)
glimpse(train_orig)
skim(train_orig)
test_orig = read_csv("test.csv")
# Remove `SalePrice` column
train = train_orig %>%
select(-SalePrice)
dim(train)
# Move `Id` to rownames, then delete
rownames(train) = train$Id
train = train %>% select(-Id)
### Extract text columns ###
textName = c("MSZoning", "Street", "LotShape", "LandContour", "Utilities",
"LotConfig", "LandSlope", "Neighborhood", "Condition1", "Condition2",
"BldgType", "HouseStyle", "RoofStyle", "RoofMatl", "Exterior1st",
"Exterior2nd", "MasVnrType", "ExterQual", "ExterCond", "Foundation",
"BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinType2",
"Heating", "HeatingQC", "CentralAir", "Electrical", "KitchenQual",
"Functional", "FireplaceQu", "GarageType", "GarageFinish", "GarageQual",
"GarageCond", "PavedDrive", "PoolQC", "Fence", "MiscFeature",
"SaleType", "SaleCondition", "Alley")
textCol = train %>% select(textName)
glimpse(textCol)
categName = c("MSZoning", "Street", "LandContour", "LotConfig", "Neighborhood", "Condition1",
"Condition2", "BldgType", "HouseStyle", "RoofStyle", "RoofMatl", "Exterior1st",
"Exterior2nd", "MasVnrType", "Foundation", "Heating", "GarageType",
"SaleType", "SaleCondition", "Alley", "Fence", "MiscFeature")
textChar = textCol %>%
select(categName)
skim(textCol)
options(stringsAsFactors = FALSE)
library(tidyverse)
library(cluster)
library(dendextend)
library(devtools)
library(skimr)
library(factoextra)
train_orig = read_csv("train.csv")
summary(train_orig)
glimpse(train_orig)
skim(train_orig)
test_orig = read_csv("test.csv")
# Remove `SalePrice` column
train = train_orig %>%
select(-SalePrice)
dim(train)
# Move `Id` to rownames, then delete
rownames(train) = train$Id
train = train %>% select(-Id)
getwd
psd
pwd
getwd()
write_csv(train_num, "train_num.csv")
options(stringsAsFactors = FALSE)
# Refer:
# https://www.kaggle.com/erikbruin/house-prices-lasso-xgboost-and-a-detailed-eda
# ----------------------------- #
library(tidyverse)
library(skimr)
train_orig = read_csv("train.csv")
summary(train_orig)
glimpse(train_orig)
skim(train_orig)
test_orig = read_csv("test.csv")
# ----------------------------- #
##### Data Cleaning #####
# Remove `SalePrice` column
train = train_orig %>%
select(-SalePrice)
dim(train)
# Move `Id` to rownames, then delete
rownames(train) = train$Id
train = train %>% select(-Id)
### Extract text columns ###
textName = c("MSZoning", "Street", "LotShape", "LandContour", "Utilities",
"LotConfig", "LandSlope", "Neighborhood", "Condition1", "Condition2",
"BldgType", "HouseStyle", "RoofStyle", "RoofMatl", "Exterior1st",
"Exterior2nd", "MasVnrType", "ExterQual", "ExterCond", "Foundation",
"BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinType2",
"Heating", "HeatingQC", "CentralAir", "Electrical", "KitchenQual",
"Functional", "FireplaceQu", "GarageType", "GarageFinish", "GarageQual",
"GarageCond", "PavedDrive", "PoolQC", "Fence", "MiscFeature",
"SaleType", "SaleCondition", "Alley")
textCol = train %>% select(textName)
glimpse(textCol)
categName = c("MSZoning", "Street", "LandContour", "LotConfig", "Neighborhood", "Condition1",
"Condition2", "BldgType", "HouseStyle", "RoofStyle", "RoofMatl", "Exterior1st",
"Exterior2nd", "MasVnrType", "Foundation", "Heating", "GarageType",
"SaleType", "SaleCondition", "Alley", "Fence", "MiscFeature")
textChar = textCol %>%
select(categName)
textScale = textCol %>%
select(-categName)
### Convert rank categories to scales for EFA ###
## Systematically factored:
# LotShape: Reg = 4, IR1 = 3, IR2 = 2, IR1 = 1
textScale$LotShape = as.numeric(factor(textScale$LotShape))
# LandDlope: Gtl = 1, Mod = 2, Sev = 3
textScale$LandSlope = as.numeric(factor(textScale$LandSlope))
# ExterQual: Ex = 1, Gd = 3, TA = 4, Fa = 2
textScale$ExterQual = as.numeric(factor(textScale$ExterQual))
# ExterCond: TA = 5, Gd = 3, Fa = 2, Po = 4, Ex = 1
textScale$ExterCond = as.numeric(factor(textScale$ExterCond))
# BsmtQual: Ex = 1, TA = 4, Gd = 3, FA = 2, NA = 0
textScale$BsmtQual = as.numeric(factor(textScale$BsmtQual))
textScale$BsmtQual = replace_na(textScale$BsmtQual, 0)
# BsmtCond: TA = 4, Gd = 2, FA = 1, Po = 3, NA = 0
textScale$BsmtCond = as.numeric(factor(textScale$BsmtCond))
textScale$BsmtCond = replace_na(textScale$BsmtCond, 0)
# BsmtExposure: No = 4, Mn = 3, Gd = 2, Av = 1, NA = 0
textScale$BsmtExposure = as.numeric(factor(textScale$BsmtExposure))
textScale$BsmtExposure = replace_na(textScale$BsmtExposure, 0)
# HeatingQC: Ex = 1, Gd = 3, TA = 5, Fa = 2, Po = 4
textScale$HeatingQC = as.numeric(factor(textScale$HeatingQC))
# CentralAir: Y = 2, N = 1
textScale$CentralAir = as.numeric(factor(textScale$CentralAir))
# KitchenQual:  Ex = 1, TA = 4, Gd = 3, FA = 2
textScale$KitchenQual = as.numeric(factor(textScale$KitchenQual))
# FireplaceQu: Ex = 1, Gd = 3, TA = 5, Fa = 2, Po = 4, NA = 0
textScale$FireplaceQu = as.numeric(factor(textScale$FireplaceQu))
textScale$FireplaceQu = replace_na(textScale$FireplaceQu, 0)
# GarageQual: Ex = 1, Gd = 3, TA = 5, Fa = 2, Po = 4, NA = 0
textScale$GarageQual = as.numeric(factor(textScale$GarageQual))
textScale$GarageQual = replace_na(textScale$GarageQual, 0)
# GarageCond: Ex = 1, Gd = 3, TA = 5, Fa = 2, Po = 4, NA = 0
textScale$GarageCond = as.numeric(factor(textScale$GarageCond))
textScale$GarageCond = replace_na(textScale$GarageCond, 0)
# PoolQC: Ex = 1, Fa = 2, Gd = 3, NA = 0
textScale$PoolQC = as.numeric(factor(textScale$PoolQC))
textScale$PoolQC = replace_na(textScale$PoolQC, 0)
## Manually factored:
# Utilities: AllPub = 4, NoSewr = 3, NoSeWa = 2, ELO = 1
# unique(textScale$Utilities)
textScale$Utilities = gsub("AllPub", 4, textScale$Utilities)
textScale$Utilities = gsub("NoSeWa", 2, textScale$Utilities)
textScale$Utilities = as.numeric(textScale$Utilities)
# BsmtFinType1: GLQ = 6, ALQ = 5, BLQ = 4, Rec = 3, LwQ = 2, Unf = 1, NA = 0
# unique(textScale$BsmtFinType1)
textScale$BsmtFinType1 = gsub("GLQ", 6, textScale$BsmtFinType1)
textScale$BsmtFinType1 = gsub("ALQ", 5, textScale$BsmtFinType1)
textScale$BsmtFinType1 = gsub("BLQ", 4, textScale$BsmtFinType1)
textScale$BsmtFinType1 = gsub("Rec", 3, textScale$BsmtFinType1)
textScale$BsmtFinType1 = gsub("LwQ", 2, textScale$BsmtFinType1)
textScale$BsmtFinType1 = gsub("Unf", 1, textScale$BsmtFinType1)
textScale$BsmtFinType1 = as.numeric(textScale$BsmtFinType1)
textScale$BsmtFinType1 = replace_na(textScale$BsmtFinType1, 0)
# BsmtFinType2: GLQ = 6, ALQ = 5, BLQ = 4, Rec = 3, LwQ = 2, Unf = 1, NA = 0
# unique(textScale$BsmtFinType2)
textScale$BsmtFinType2 = gsub("GLQ", 6, textScale$BsmtFinType2)
textScale$BsmtFinType2 = gsub("ALQ", 5, textScale$BsmtFinType2)
textScale$BsmtFinType2 = gsub("BLQ", 4, textScale$BsmtFinType2)
textScale$BsmtFinType2 = gsub("Rec", 3, textScale$BsmtFinType2)
textScale$BsmtFinType2 = gsub("LwQ", 2, textScale$BsmtFinType2)
textScale$BsmtFinType2 = gsub("Unf", 1, textScale$BsmtFinType2)
textScale$BsmtFinType2 = as.numeric(textScale$BsmtFinType2)
textScale$BsmtFinType2 = replace_na(textScale$BsmtFinType2, 0)
# Electrical: SBrkr = 5, FuseA = 4, FuseF = 3, FuseP = 2, Mix = 1
# unique(textScale$Electrical)
textScale$Electrical = gsub("SBrkr", 5, textScale$Electrical)
textScale$Electrical = gsub("FuseA", 4, textScale$Electrical)
textScale$Electrical = gsub("FuseF", 3, textScale$Electrical)
textScale$Electrical = gsub("FuseP", 2, textScale$Electrical)
textScale$Electrical = gsub("Mix", 1, textScale$Electrical)
textScale$Electrical = as.numeric(textScale$Electrical)
# Functional: Typ = 8, Min1 = 7, Min2 = 6, Mod = 5, Maj1 = 4, Maj2 = 3, Sev = 2, Sal = 1
# unique(textScale$Functional)
textScale$Functional = gsub("Typ", 8, textScale$Functional)
textScale$Functional = gsub("Min1", 7, textScale$Functional)
textScale$Functional = gsub("Min2", 6, textScale$Functional)
textScale$Functional = gsub("Mod", 5, textScale$Functional)
textScale$Functional = gsub("Maj1", 4, textScale$Functional)
textScale$Functional = gsub("Maj2", 3, textScale$Functional)
textScale$Functional = gsub("Sev", 2, textScale$Functional)
textScale$Functional = gsub("Sal", 1, textScale$Functional)
textScale$Functional = as.numeric(textScale$Functional)
# GarageFinish: RFn = 3, Fin = 2, Unf = 1, NA = 0
# unique(textScale$GarageFinish)
textScale$GarageFinish = gsub("RFn", 3, textScale$GarageFinish)
textScale$GarageFinish = gsub("Fin", 2, textScale$GarageFinish)
textScale$GarageFinish = gsub("Unf", 1, textScale$GarageFinish)
textScale$GarageFinish = as.numeric(textScale$GarageFinish)
textScale$GarageFinish = replace_na(textScale$GarageFinish, 0)
# PavedDrive: Y = 3, P = 2, N = 1
# unique(textScale$PavedDrive)
textScale$PavedDrive = gsub("Y", 3, textScale$PavedDrive)
textScale$PavedDrive = gsub("P", 2, textScale$PavedDrive)
textScale$PavedDrive = gsub("N", 1, textScale$PavedDrive)
textScale$PavedDrive = as.numeric(textScale$PavedDrive)
# Extraxt other numeric scale variables
train %>% select(-textName) %>% glimpse()
scaleName = c("OverallQual", "OverallCond")
scaleCol = train %>% select(scaleName)
scaleCol = cbind(scaleCol, textScale)
glimpse(scaleCol)
scaleCol = na.omit(scaleCol)
train %>% select(-textName, -scaleName) %>% glimpse() -> train_num
### Missing Values ###
# Missing value in <chr> column ???
# Use other variables to build classifiers, then `predict` the missing text
# Numeric variables: Replace with mean
skim(train_num)
train_num$GarageYrBlt = replace_na(train_num$GarageYrBlt,
mean(train_num$GarageYrBlt, na.rm = TRUE))
train_num$LotFrontage = replace_na(train_num$LotFrontage,
mean(train_num$LotFrontage, na.rm = TRUE))
train_num$MasVnrArea = replace_na(train_num$MasVnrArea,
mean(train_num$MasVnrArea, na.rm = TRUE))
skim(train_num)
write_csv(train_num, "train_num.csv")
write_csv(scaleCol, "scaleCol.csv")
write_csv(textChar, "textChar.csv")
train_num = read_csv("train_num.csv")
train_num_s = scale(train_num)
dist_num = dist(train_num_s)
h1 = hcut(dist_num, k = 3)
fviz_dend(h1, rect = TRUE)
h6 = hcut(dist_num, k = 6)
fviz_dend(h6, rect = TRUE)
h5 = hcut(dist_num, k = 5)
fviz_dend(h5, rect = TRUE)
h4 = hcut(dist_num, k = 4)
fviz_dend(h4, rect = TRUE)
kw <- kmeans(train_num, centers = 2, iter.max = 25, nstart = 25)
fviz_cluster(kw, data = train_num)
fviz_nbclust(train_num, kmeans, method = "wss")
kw6 = kmeans(train_num, centers = 6, 25, 25)
fviz_cluster(kw6, data = train_num)
plot(silhouette(kw$cluster, dist = dist(train_num)), col = 1:2, border = NA)
plot(silhouette(kw6$cluster, dist = dist(train_num)), col = 1:6, border = NA)
fviz_cluster(kw6, data = train_num)
train_num = read_csv("train_num.csv")
hclust(train_num)
kw <- kmeans(train_num, centers = 2, iter.max = 25, nstart = 25)
fviz_cluster(kw, data = train_num)
is.na(train_num)
kw$size
train_num_s <- scale(train_num)
kw2 <- kmeans(train_num_s, centers = 2, iter.max = 25, nstart = 25)
fviz_cluster(kw2, data = train_num_s)
kw2$size
fviz_nbclust(train_num_s, kmeans, method="silhouette")
fviz_nbclust(train_num_s, kmeans, method = "wss")
fviz_nbclust(train_num_s, kmeans, method="silhouette")
# Top 3: k = 2, 3, 6
fviz_nbclust(train_num_s, kmeans, method = "wss")
plot(silhouette(kw$cluster, dist = dist(train_num_s)), col = 1:2, border = NA)
kw6 = kmeans(train_num_s, centers = 6, 25, 25)
fviz_cluster(kw6, data = train_num_s)
plot(silhouette(kw6$cluster, dist = dist(train_num_s)), col = 1:6, border = NA)
plot(silhouette(kw$cluster, dist = dist(train_num_s)), col = 1:2, border = NA)
fviz_nbclust(train_num_s, kmeans, method="silhouette")
kw3 <- kmeans(train_num_s, centers = 3, 25, 25)
fviz_cluster(kw3, data = train_num_s)
plot(silhouette(kw2$cluster, dist = dist(train_num_s)), col = 1:2, border = NA)
plot(silhouette(kw3$cluster, dist = dist(train_num_s)), col = 1:2, border = NA)
plot(silhouette(kw3$cluster, dist = dist(train_num_s)), col = 1:3, border = NA)
kw4 <- kmeans(train_num_s, centers = 4, 25, 25)
fviz_cluster(kw4, data = train_num_s)
plot(silhouette(kw4$cluster, dist = dist(train_num_s)), col = 1:4, border = NA)
plot(silhouette(kw6$cluster, dist = dist(train_num_s)), col = 1:6, border = NA)
# Avg silhouette score: 0.14
kw4$size
# Avg silhouette score: 0.14
kw6$size
fviz_nbclust(train_num_s, kmeans, method="silhouette")
# Top 3: k = 2, 3, 6
fviz_nbclust(train_num_s, kmeans, method = "wss")
fviz_cluster(kw2, data = train_num_s)
plot(silhouette(kw2$cluster, dist = dist(train_num_s)), col = 1:2, border = NA)
fviz_cluster(kw4, data = train_num_s)
plot(silhouette(kw4$cluster, dist = dist(train_num_s)), col = 1:4, border = NA)
fviz_cluster(kw6, data = train_num_s)
plot(silhouette(kw6$cluster, dist = dist(train_num_s)), col = 1:6, border = NA)
options(stringsAsFactors=FALSE)
options(digits=3)
library(tidyverse)
library(factoextra)
library(skimr)
library("corrplot")
train_num = read_csv("train_num.csv")
train_num_s = scale(train_num)
trian_p=prcomp(train_num_s,center=TRUE,scale=TRUE)
class(trian_p)
summary(trian_p)
fviz_screeplot(trian_p,addlabels=T,ncp=15)
# Elbow: 13
get_eigenvalue(trian_p)
pca_cor = cor(train_num_s)
corrplot(pca_cor,
method = "color",
type = "upper",
diag = F,
addCoef.col = "white")
corrplot(pca_cor,
method = "color",
type = "upper",
diag = F)
corrplot(pca_cor,
method = "color",
type = "upper",
diag = F)
options(stringsAsFactors = FALSE)
scaleCol = read_csv("scaleCol.csv")
scaleCol_cor <- cor(scaleCol)
cortest.bartlett(scaleCol_cor, nrow(scaleCol))
library(factoextra)
library(corrplot)
library(psych)
library(GPArotation)
cortest.bartlett(scaleCol_cor, nrow(scaleCol))
KMO(scaleCol_cor)
corrplot(scaleCol_cor,
type="upper",
diag=F,
method='color',
order="hclust")
scaleCol_s = scale(scaleCol)
scaleCol_pca = prcomp(scaleCol_s, center=TRUE, scale=TRUE)
fviz_screeplot(scaleCol_pca, addlabels=T)
fviz_screeplot(scaleCol_pca, addlabels=T, npc = 15)
summary(scaleCol_pca)
scaleCol_pca = prcomp(scaleCol_s, center=TRUE, scale=TRUE)
summary(scaleCol_pca)
fviz_screeplot(scaleCol_pca, addlabels=T, npc = 15)
fviz_screeplot(scaleCol_pca, addlabels=T, ncp = 15)
fviz_screeplot(scaleCol_pca, addlabels=T, ncp = 20)
# Elbow: 15, 17
num_f = fa.parallel(scaleCol_s, fm="ml", fa="fa")
fviz_screeplot(scaleCol_pca, addlabels=T, ncp = 20)
# Elbow: 6, 11, 17
num_f = fa.parallel(scaleCol_s, fm="ml", fa="fa")
fa3 = fa(scaleCol_s, nfactors=3, rotate="oblimin", fm="ml")
sum(num_f$fa.values >1)
# 6 factors
sum(num_f$fa.values >1)
# 2 factors
sum(num_f$fa.values >0.7)
# Try 3 factors
fa3 = fa(scaleCol_s, nfactors=3, rotate="oblimin", fm="ml")
fa3
fa3
print(fa1, cut=.3)
print(fa3, cut=.3)
KMO(scaleCol_cor)
print(fa3, cut=.3)
print(fa3, cut=.3)
print(fa3, cut=.3)
# Remove overlapping variables
scaleCol_c = scaleCol %>%
select(-BsmtQual, -GarageFinish)
scaleCol_pca = prcomp(scaleCol, center=TRUE, scale=TRUE)
summary(scaleCol_pca)
fviz_screeplot(scaleCol_pca, addlabels=T, ncp = 20)
fviz_screeplot(scaleCol_pca, addlabels=T, ncp = 20)
scaleCol_pca = prcomp(scaleCol, center=TRUE, scale=TRUE)
summary(scaleCol_pca)
fviz_screeplot(scaleCol_pca, addlabels=T, ncp = 20)
scaleCol_pca = prcomp(scaleCol, center=TRUE, scale=TRUE)
summary(scaleCol_pca)
fviz_screeplot(scaleCol_pca, addlabels=T, ncp = 20)
dev.off()
scaleCol_pca = prcomp(scaleCol, center=TRUE, scale=TRUE)
summary(scaleCol_pca)
fviz_screeplot(scaleCol_pca, addlabels=T, ncp = 20)
# Elbow: 6, 11, 14, 17
num_f = fa.parallel(scaleCol, fm="ml", fa="fa")
# 6 factors
sum(num_f$fa.values >1)
# 2 factors
sum(num_f$fa.values >0.7)
# Try 3 factors
fa3 = fa(scaleCol, nfactors=3, rotate="oblimin", fm="ml")
print(fa3, cut=.3)
# Remove overlapping variables
scaleCol_c = scaleCol %>%
select(-BsmtQual, -GarageFinish)
# Try again
fa3_c = fa(scaleCol_c, nfactors=3, rotate="oblimin", fm="ml")
print(fa3c, cut=.3)
print(fa3_c, cut=.3)
print(fa3, cut=.3)
,
# Remove overlapping variables and variables not in any MLs
scaleCol_c = scaleCol %>%
select(-BsmtQual, -GarageFinish, -PoolQC, -Functional, -FireplaceQu,
-BsmtFinType1, -BsmtFinType2, -OverallCond, -LotShape,
-Utilities, -LandSlope, -ExterCond)
# Try again
fa3_c = fa(scaleCol_c, nfactors=3, rotate="oblimin", fm="ml")
print(fa3_c, cut=.3)
# Remove overlapping variables and variables not in any MLs
scaleCol_c = scaleCol %>%
select(-BsmtQual, -GarageFinish)
# Try again
fa3_c = fa(scaleCol_c, nfactors=3, rotate="oblimin", fm="ml")
print(fa3_c, cut=.3)
plot(fa3_c, labels = names(scaleCol_c))
fa.diagram(fa3_c)
# Remove overlapping variables and variables not in any MLs
scaleCol_c = scaleCol %>%
select(-BsmtQual, -GarageFinish, -PoolQC, -Functional, -FireplaceQu,
-BsmtFinType1, -BsmtFinType2, -OverallCond, -LotShape,
-Utilities, -LandSlope, -ExterCond)
# Try again
fa3_c = fa(scaleCol_c, nfactors=3, rotate="oblimin", fm="ml")
print(fa3_c, cut=.3)
scaleCol_c = scaleCol_c %>%
select(-BsmtExposure)
fa3_c = fa(scaleCol_c, nfactors=3, rotate="oblimin", fm="ml")
print(fa3_c, cut=.3)
fa.diagram(fa3_c)
print(fa3_c, cut=.3)
names(fa3_c)
KMO(scaleCol_cor)
library(psy)
install.packages("psy")
library(psy)
cronbach(scaleCol_cor)
cronbach(scaleCol)
cronbach(scaleCol_s)
# TFI = 0.99, RMSR = 0.01, RMSEA = 0.03, all Excellent
fa.diagram(fa3_c)
library(gridExtra)
# Elbow: 13
get_eigenvalue(trian_p)
eigen = get_eigenvalue(trian_p)
chart = head(eigen, 13)
png("PCA Eigenvalues.png")
eg = tableGrob(chart)
grid.arrange(eg)
dev.off()
fviz_screeplot(scaleCol_pca, addlabels=T, ncp = 20)
# 2 centers
kw2 <- kmeans(train_num_s, centers = 2, iter.max = 25, nstart = 25)
fviz_cluster(kw2, data = train_num_s)
# Remove row 1299
train_num_c = train_num_s[-1299, ]
nrow(train)
nrow(train_num_c)
# Redo 2 centers
kw2_c <- kmeans(train_num_c, centers = 2, iter.max = 25, nstart = 25)
fviz_cluster(kw2_c, data = train_num_s)
fviz_cluster(kw2_c, data = train_num_c)
kw2_c$size
plot(silhouette(kw2_c$cluster, dist = dist(train_num_c)), col = 1:2, border = NA)
kw3 <- kmeans(train_num_c, centers = 3, 25, 25)
fviz_cluster(kw3, data = train_num_c)
plot(silhouette(kw3$cluster, dist = dist(train_num_c)), col = 1:3, border = NA)
kw4 <- kmeans(train_num_c, centers = 4, 25, 25)
fviz_cluster(kw4, data = train_num_c)
plot(silhouette(kw4$cluster, dist = dist(train_num_c)), col = 1:4, border = NA)
kw6 = kmeans(train_num_c, centers = 6, 25, 25)
fviz_cluster(kw6, data = train_num_c)
plot(silhouette(kw6$cluster, dist = dist(train_num_c)), col = 1:6, border = NA)
train_num_c = train_num_s[-1299, ]
dist_num = dist(train_num_c)
h2 = hcut(dist_num, k = 2)
fviz_dend(h2, rect = TRUE)
h4 = hcut(dist_num, k = 4)
fviz_dend(h4, rect = TRUE)
fviz_cluster(kw2_c, data = train_num_c)
fviz_cluster(kw2, data = train_num_s)
# Remove outliers
outlier = as.numeric(c("1299", "54", "524", "636", "186"))
train_num_c = train_num_s[-outlier, ]
nrow(train_num_c)
train_num_c = train_num_s[-outlier, ]
# Redo 2 centers
kw2_c <- kmeans(train_num_c, centers = 2, iter.max = 25, nstart = 25)
fviz_cluster(kw2_c, data = train_num_c)
kw2_c$size
plot(silhouette(kw2_c$cluster, dist = dist(train_num_c)), col = 1:2, border = NA)
kw3 <- kmeans(train_num_c, centers = 3, 25, 25)
fviz_cluster(kw3, data = train_num_c)
plot(silhouette(kw3$cluster, dist = dist(train_num_c)), col = 1:3, border = NA)
kw4 <- kmeans(train_num_c, centers = 4, 25, 25)
fviz_cluster(kw4, data = train_num_c)
plot(silhouette(kw4$cluster, dist = dist(train_num_c)), col = 1:4, border = NA)
train_num_s = scale(train_num)
outlier = as.numeric(c("1299", "54", "524", "636", "186"))
train_num_c = train_num_s[-outlier, ]
dist_num = dist(train_num_c)
h2 = hcut(dist_num, k = 2)
fviz_dend(h2, rect = TRUE)
fviz_screeplot(trian_p,addlabels=T,ncp=15)
h4 = hcut(dist_num, k = 4)
fviz_dend(h4, rect = TRUE)
kw6 = kmeans(train_num_c, centers = 6, 25, 25)
fviz_cluster(kw6, data = train_num_c)
plot(silhouette(kw6$cluster, dist = dist(train_num_c)), col = 1:6, border = NA)
kw4 <- kmeans(train_num_c, centers = 4, 25, 25)
fviz_cluster(kw4, data = train_num_c)
plot(silhouette(kw4$cluster, dist = dist(train_num_c)), col = 1:4, border = NA)
fviz_nbclust(train_num_c, kmeans, method="silhouette")
# Top 3: k = 2, 3, 4
fviz_nbclust(train_num_s, kmeans, method = "wss")
# Top 3: k = 2, 3, 4
fviz_nbclust(train_num_c, kmeans, method = "wss")
kw3 <- kmeans(train_num_c, centers = 3, 25, 25)
fviz_cluster(kw3, data = train_num_c)
plot(silhouette(kw3$cluster, dist = dist(train_num_c)), col = 1:3, border = NA)
plot(silhouette(kw3$cluster, dist = dist(train_num_c)), col = 1:3, border = NA)
plot(silhouette(kw4$cluster, dist = dist(train_num_c)), col = 1:4, border = NA)
plot(silhouette(kw2_c$cluster, dist = dist(train_num_c)), col = 1:2, border = NA)
fviz_nbclust(train_num_c, kmeans, method="silhouette")
# Top 3: k = 2, 3, 4
fviz_nbclust(train_num_c, kmeans, method = "wss")
fviz_cluster(kw4, data = train_num_c)
fviz_screeplot(scaleCol_pca, addlabels=T, ncp = 20)
# Elbow: 3, 6, 11, 14, 17
num_f = fa.parallel(scaleCol, fm="ml", fa="fa")
