# BsmtQual: Ex = 5, TA = 3, Gd = 4, FA = 2, Po = 1, NA = 0
scaleFct$BsmtQual = factor(scaleFct$BsmtQual)
fct_explicit_na(scaleFct$BsmtQual, "NA")
ordered(scaleFct$BsmtQual, levels = c("NA", "Po", "Fa", "TA", "Gd", "Ex"))
# BsmtCond: Ex = 5, TA = 3, Gd = 4, FA = 2, Po = 1, NA = 0
scaleFct$BsmtCond = factor(scaleFct$BsmtCond)
fct_explicit_na(scaleFct$BsmtCond, "NA")
ordered(scaleFct$BsmtCond, levels = c("NA", "Po", "Fa", "TA", "Gd", "Ex"))
# BsmtExposure: No = 1, Mn = 2, Gd = 4, Av = 3, NA = 0
scaleFct$BsmtExposure = factor(scaleFct$BsmtExposure)
fct_explicit_na(scaleFct$BsmtExposure, "NA")
ordered(scaleFct$BsmtExposure, levels = c("NA", "No", "Mn", "Av", "Gd"))
# HeatingQC: TA = 3, Gd = 4, Fa = 2, Po = 1, Ex = 5
scaleFct$HeatingQC = factor(scaleFct$HeatingQC)
fct_explicit_na(scaleFct$HeatingQC, "NA")
ordered(scaleFct$HeatingQC, levels = c("Po", "Fa", "TA", "Gd", "Ex"))
# CentralAir: Y = 2, N = 1
scaleFct$CentralAir = factor(scaleFct$CentralAir)
fct_explicit_na(scaleFct$CentralAir, "NA")
ordered(scaleFct$CentralAir, levels = c("N", "Y"))
# KitchenQual:   Ex = 5, Gd = 4, TA = 3, Fa = 2, Po = 1
scaleFct$KitchenQual = factor(scaleFct$KitchenQual)
fct_explicit_na(scaleFct$KitchenQual, "NA")
ordered(scaleFct$KitchenQual, levels = c("Po", "Fa", "Ta", "Gd", "Ex"))
# FireplaceQu: Ex = 5, Gd = 4, TA = 3, Fa = 2, Po = 1, NA = 0
scaleFct$FireplaceQu = factor(scaleFct$FireplaceQu)
fct_explicit_na(scaleFct$FireplaceQu, "NA")
ordered(scaleFct$FireplaceQu, levels = c("NA", "Po", "Fa", "Ta", "Gd", "Ex"))
# GarageQual: Ex = 5, Gd = 4, TA = 3, Fa = 2, Po = 1, NA = 0
scaleFct$GarageQual = factor(scaleFct$GarageQual)
fct_explicit_na(scaleFct$GarageQual, "NA")
ordered(scaleFct$GarageQual, levels = c("NA", "Po", "Fa", "Ta", "Gd", "Ex"))
# GarageCond: Ex = 5, Gd = 4, TA = 3, Fa = 2, Po = 1, NA = 0
scaleFct$GarageCond = factor(scaleFct$GarageCond)
fct_explicit_na(scaleFct$GarageCond, "NA")
ordered(scaleFct$GarageCond, levels = c("NA", "Po", "Fa", "Ta", "Gd", "Ex"))
# PoolQC: Ex = 4, Fa = 1, Gd = 3, NA = 0, TA = 2
scaleFct$PoolQC = factor(scaleFct$PoolQC)
fct_explicit_na(scaleFct$PoolQC, "NA")
ordered(scaleFct$PoolQC, levels = c("NA", "Fa", "TA","Gd", "Ex"))
# Utilities: AllPub = 4, NoSewr = 3, NoSeWa = 2, ELO = 1
scaleFct$Utilities = factor(scaleFct$Utilities)
fct_explicit_na(scaleFct$Utilities, "NA")
ordered(scaleFct$Utilities, levels = c("ELO", "NoSeWa", "NoSewr", "AllPub"))
# BsmtFinType1: GLQ = 6, ALQ = 5, BLQ = 4, Rec = 3, LwQ = 2, Unf = 1, NA = 0
scaleFct$BsmtFinType1 = factor(scaleFct$BsmtFinType1)
fct_explicit_na(scaleFct$BsmtFinType1, "NA")
ordered(scaleFct$BsmtFinType1, levels = c("NA", "Unf", "LwQ", "Rec", "BLQ", "ALQ", "GLQ"))
# BsmtFinType2: GLQ = 6, ALQ = 5, BLQ = 4, Rec = 3, LwQ = 2, Unf = 1, NA = 0
scaleFct$BsmtFinType2 = factor(scaleFct$BsmtFinType2)
fct_explicit_na(scaleFct$BsmtFinType2, "NA")
ordered(scaleFct$BsmtFinType2, levels = c("NA", "Unf", "LwQ", "Rec", "BLQ", "ALQ", "GLQ"))
# Electrical: SBrkr = 5, FuseA = 4, FuseF = 3, FuseP = 2, Mix = 1, NA = 0
scaleFct$Electrical = factor(scaleFct$Electrical)
fct_explicit_na(scaleFct$Electrical, "NA")
ordered(scaleFct$Electrical, levels = c("NA", "Mix", "FuseP", "FuseF", "FuseA", "SBrkr"))
# Functional: Typ = 8, Min1 = 7, Min2 = 6, Mod = 5, Maj1 = 4, Maj2 = 3, Sev = 2, Sal = 1
scaleFct$Functional = factor(scaleFct$Functional)
fct_explicit_na(scaleFct$Functional, "NA")
ordered(scaleFct$Functional, levels = c("Sal", "Sev", "Maj2", "Maj1", "Mod", "Min2", "Min1", "Typ"))
# GarageFinish: RFn = 3, Fin = 2, Unf = 1, NA = 0
scaleFct$GarageFinish = factor(scaleFct$GarageFinish)
fct_explicit_na(scaleFct$GarageFinish, "NA")
ordered(scaleFct$GarageFinish, levels = c("NA", "Unf", "Fin", "RFn"))
# PavedDrive: Y = 3, P = 2, N = 1
scaleFct$PavedDrive = factor(scaleFct$PavedDrive)
fct_explicit_na(scaleFct$PavedDrive, "NA")
ordered(scaleFct$PavedDrive, levels = c("NA", "N", "P", "Y", "Mod"))
train %>% select(-chrName) %>% glimpse()
scaleName = c("OverallQual", "OverallCond")
scaleNum = train %>% select(scaleName)
scaleNum$OverallQual = factor(scaleNum$OverallQual)
fct_explicit_na(scaleNum$OverallQual, "0")
ordered(scaleNum$OverallQual, levels = c("0", "1", "2", "3", "4", "5",
"6", "7", "8", "9", "10"))
scaleNum$OverallCond = factor(scaleNum$OverallCond)
fct_explicit_na(scaleNum$OverallCond, "0")
ordered(scaleNum$OverallCond, levels = c("0", "1", "2", "3", "4", "5",
"6", "7", "8", "9", "10"))
scaleFct = cbind(scaleFct, scaleNum)
glimpse(scaleFct)
skim(scaleFct)
# which(is.na(scaleFct), arr.ind=TRUE)
# row 1380 has NA, decided to add NA as a category
train %>% select(-chrName, -scaleName) %>% glimpse() -> train_num
### Missing Values ###
skim(typeCol)
typeCol$Alley = replace_na(typeCol$Alley, "N/A")
typeCol$Fence = replace_na(typeCol$Fence, "N/A")
typeCol$GarageType = replace_na(typeCol$GarageType, "N/A")
typeCol$MasVnrType = replace_na(typeCol$MasVnrType, "N/A")
typeCol$MiscFeature = replace_na(typeCol$MiscFeature, "N/A")
skim(typeCol)
# Convert months to quarters
quart = function(x) {
if (x %in% c(1, 2, 3)) {
Quarter = "I"
} else if (x %in% c(4, 5, 6)){
Quarter = "II"
} else if (x %in% c(7, 8, 9)) {
Quarter = "III"
} else {
Quarter = "IV"
}
return(Quarter)
}
typeCol$Quarter = map_chr(typeCol$MoSold, quart)
skim(typeCol)
typeCol$Quarter
typeCol = typeCol %>% select(-MoSold)
skim(typeCol)
skim(train_num)
summary(train_num)
train_num$LotFrontage = replace_na(train_num$LotFrontage,
mean(train_num$LotFrontage, na.rm = TRUE))
train_num$MasVnrArea = replace_na(train_num$MasVnrArea,
mean(train_num$MasVnrArea, na.rm = TRUE))
train_num$GarageYrBlt = replace_na(train_num$GarageYrBlt,
mean(train_num$GarageYrBlt, na.rm = TRUE))
# Parse years to ages
# Age of Garage when sold
train_num = train_num %>%
mutate(GarageAge = train_num$YrSold - train_num$GarageYrBlt)
# Age of House when sold
train_num = train_num %>%
mutate(Age = train_num$YrSold - train_num$YearBuilt)
# Age of house after reconstruction (if applicable)
train_num = train_num %>%
mutate(RemodAge = train_num$YrSold - train_num$YearRemodAdd)
summary(train_num)
# remove the year column
train_num = train_num %>%
select(-YearBuilt, -GarageYrBlt, -YearRemodAdd)
ncol(train_num)
ncol(scaleFct)
ncol(typeCol)
write_csv(train_num, "train_dbl.csv")    # <dbl>
write_csv(scaleFct, "scale_fct.csv")     # <fct>
write_csv(typeCol, "type_chr.csv")       # <chr>
options(stringsAsFactors=FALSE)
options(digits=3)
library(tidyverse)
library(factoextra)
library(skimr)
library("corrplot")
library(gridExtra)
train_num = read_csv("Subsets/train_dbl.csv")
summary(train_num)
summary(train_num)
train_num_s = scale(train_num)
pca_cor = cor(train_num)
corrplot(pca_cor,
method = "color",
type = "upper",
diag = F)
corrplot(pca_cor,
method = "color",
type = "upper",
diag = F)
train_p=prcomp(train_num_s,center=TRUE,scale=TRUE)
summary(train_p)
fviz_screeplot(train_p,addlabels=T, ncp = 25)
# Elbow: 11, 16, 19, 22
get_eigenvalue(train_p)
# first 11 components with eigenvalue > 1
# 22 pcs explains ~93% variance, will choose 22
eigen = get_eigenvalue(train_p)
chart = head(eigen, 23)
png("PCA Eigenvalues.png")
eg = tableGrob(chart)
grid.arrange(eg)
dev.off()
fviz_pca_var(train_p, choice = "var")
fviz_pca_contrib(train_p, choice = "var")
fviz_pca_ind(train_p, col.var = "contrib", repl = TRUE,
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
col.ind = "cos2")
fviz_pca_biplot(train_p, repl = TRUE, col.var = "red", col.ind = "grey")
fviz_pca_contrib(train_p, choice = "var")
install.packages("Scale")
library(scale)
library(Scale)
train_num_n = normalize(train_num)
train_num_n = map_dbl(train_num, normalize)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
train_num_N <- as.data.frame(lapply(train_num, normalize))
summary(train_num_N)
train_N_p=prcomp(train_num_N,center=TRUE,scale=TRUE)
summary(train_N_p)
fviz_screeplot(train_N_p,addlabels=T, ncp = 25)
# Elbow: 11, 16, 19, 22
get_eigenvalue(train_N_p)
train_num_s
summary(train_num_s)
summary(train_num_N)
# Elbow: 11, 16, 19, 22
get_eigenvalue(train_N_p)
source('~/Documents/GitHub/BA-820-Project/Final Script/PCA-820 Team.R')
train_pca = predict(train_N_p, newdata = train_num)
train_pca = predict(train_N_p, newdata = train_num)
colnames(train_num)
colnames(train_N_p)
options(stringsAsFactors=FALSE)
options(digits=3)
library(tidyverse)
library(factoextra)
library(skimr)
library("corrplot")
library(gridExtra)
train_num = read_csv("Subsets/train_dbl.csv")
summary(train_num)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
train_num_N <- as.data.frame(lapply(train_num, normalize))
summary(train_num_N)
train_N_p=prcomp(train_num_N,center=TRUE,scale=TRUE)
summary(train_N_p)
fviz_screeplot(train_N_p,addlabels=T, ncp = 25)
# Elbow: 11, 16, 19, 22
get_eigenvalue(train_N_p)
train_pca = predict(train_N_p, newdata = train_num)
class(train_num)
summary(train_num)
options(stringsAsFactors=FALSE)
options(digits=3)
library(tidyverse)
library(factoextra)
library(skimr)
library("corrplot")
library(gridExtra)
train_num = read_csv("Subsets/train_dbl.csv")
summary(train_num)
train_num = as.data.frame(train_num)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
train_num_N <- as.data.frame(lapply(train_num, normalize))
summary(train_num_N)
train_N_p=prcomp(train_num_N,center=TRUE,scale=TRUE)
summary(train_N_p)
fviz_screeplot(train_N_p,addlabels=T, ncp = 25)
# Elbow: 11, 16, 19, 22
get_eigenvalue(train_N_p)
# first 11 components with eigenvalue > 1
# 22 pcs explains ~93% variance, will choose 22
train_pca = predict(train_N_p, newdata = train_num)
train_pca = predict(train_N_p, newdata = train_num_N)
train_pca = train_pca[, 1:22]
train_pca = as.data.frame(train_pca)
head(train_pca)
nrow(train_pca) == nrow(train_num)
# Export PCs to profiling
write_csv(train_pca, "Subsets/train_pca.csv")
outlier = as.numeric(c("1299", "54", "524", "636", "186"))
train_num = train_num[-outlier, ]
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
train_num_N <- as.data.frame(lapply(train_num, normalize))
summary(train_num_N)
train_N_p=prcomp(train_num_N,center=TRUE,scale=TRUE)
summary(train_N_p)
fviz_screeplot(train_N_p,addlabels=T, ncp = 25)
# Elbow: 11, 16, 19, 22
get_eigenvalue(train_N_p)
train_pca = predict(train_N_p, newdata = train_num_N)
train_pca = train_pca[, 1:22]
train_pca = as.data.frame(train_pca)
nrow(train_pca) == nrow(train_num)
# Export PCs to profiling
write_csv(train_pca, "Subsets/train_pca.csv")
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
train_num_N <- as.data.frame(lapply(train_num, normalize))
fviz_nbclust(train_num_N, kmeans, method="silhouette")
# Top 3: k = 2, 4, 7
fviz_nbclust(train_num_N, kmeans, method = "wss")
kw2N <- kmeans(train_num_N, centers = 2, iter.max = 25, nstart = 25)
fviz_cluster(kw2N, data = train_num_N)
train_num = read_csv("Subsets/train_dbl.csv")
train_num_s <- scale(train_num)
fviz_nbclust(train_num_s, kmeans, method="silhouette")
# Top 3: k = 2, 3, 6
fviz_nbclust(train_num_s, kmeans, method = "wss")
# Elbow: k= 4
# 2 centers
kw2 <- kmeans(train_num_s, centers = 2, iter.max = 25, nstart = 25)
fviz_cluster(kw2, data = train_num_s)
# 2 centers
kw2 <- kmeans(train_num_s, centers = 2, iter.max = 25, nstart = 25)
fviz_cluster(kw2, data = train_num_s)
kw2$size
plot(silhouette(kw2$cluster, dist = dist(train_num_s)), col = 1:2, border = NA)
# Remove outliers to get a better visuailization
outlier = as.numeric(c("1299", "54", "524", "636", "186"))
train_num_c = train_num_s[-outlier, ]
fviz_nbclust(train_num_c, kmeans, method="silhouette")
# Top 3: k = 2, 3, 9
fviz_nbclust(train_num_c, kmeans, method = "wss")
# Redo 2 centers
kw2_c <- kmeans(train_num_c, centers = 2, iter.max = 25, nstart = 25)
fviz_cluster(kw2_c, data = train_num_c)
kw2_c$size
plot(silhouette(kw2_c$cluster, dist = dist(train_num_c)), col = 1:2, border = NA)
kw3 <- kmeans(train_num_c, centers = 3, 25, 25)
fviz_cluster(kw3, data = train_num_c)
plot(silhouette(kw3$cluster, dist = dist(train_num_c)), col = 1:3, border = NA)
kw4 <- kmeans(train_num_c, centers = 4, 25, 25)
fviz_cluster(kw4, data = train_num_c)
plot(silhouette(kw4$cluster, dist = dist(train_num_c)), col = 1:4, border = NA)
# Avg silhouette score: 0.15
kw4$size
kw6 = kmeans(train_num_c, centers = 6, 25, 25)
fviz_cluster(kw6, data = train_num_c)
plot(silhouette(kw6$cluster, dist = dist(train_num_c)), col = 1:6, border = NA)
kw7 = kmeans(train_num_c, centers = 7, 25, 25)
fviz_cluster(kw7, data = train_num_c)
plot(silhouette(kw7$cluster, dist = dist(train_num_c)), col = 1:7, border = NA)
kw9 = kmeans(train_num_c, centers = 9, 25, 25)
fviz_cluster(kw9, data = train_num_c)
plot(silhouette(kw9$cluster, dist = dist(train_num_c)), col = 1:9, border = NA)
library(dplyr)
library(purrr)
library(cluster)
library(factoextra)
train_num = read_csv("Subsets/train_dbl.csv")
train_num_s <- scale(train_num)
fviz_nbclust(train_num_s, kmeans, method="silhouette")
# Top 3: k = 2, 3, 6
fviz_nbclust(train_num_s, kmeans, method = "wss")
# 2 centers
kw2 <- kmeans(train_num_s, centers = 2, iter.max = 25, nstart = 25)
fviz_cluster(kw2, data = train_num_s)
kw2$size
plot(silhouette(kw2$cluster, dist = dist(train_num_s)), col = 1:2, border = NA)
fviz_nbclust(train_num_s, kmeans, method="silhouette", k.max = 33)
# Top 3: k = 2, 3, 4
fviz_nbclust(train_num_s, kmeans, method = "wss", k.max = 33)
options(stringsAsFactors = FALSE)
library(dplyr)
library(purrr)
library(cluster)
library(factoextra)
train_num = read_csv("Subsets/train_dbl.csv")
train_num_s <- scale(train_num)
fviz_nbclust(train_num_s, kmeans, method="silhouette", k.max = 33)
# Top 3: k = 2, 3, 4
fviz_nbclust(train_num_s, kmeans, method = "wss", k.max = 33)
# 2 centers
kw2 <- kmeans(train_num_s, centers = 2, iter.max = 25, nstart = 25)
fviz_cluster(kw2, data = train_num_s)
kw2$size
plot(silhouette(kw2$cluster, dist = dist(train_num_s)), col = 1:2, border = NA)
# Remove outliers to get a better visuailization
outlier = as.numeric(c("1299", "54", "524", "636", "186"))
train_num_c = train_num_s[-outlier, ]
# Save to a new file
write_csv(train_num_c, "Subsets/train_dbl_c.csv")
train_num_c = as.data.frame(train_num_c)
# Save to a new file
write_csv(train_num_c, "Subsets/train_dbl_c.csv")
train_num = read_csv("Subsets/train_dbl_c.csv")
summary(train_num)
train_num = as.data.frame(train_num)
train_num_s = scale(train_num)
train_p=prcomp(train_num_s,center=TRUE,scale=TRUE)
summary(train_p)
fviz_screeplot(train_p,addlabels=T, ncp = 25)
# Elbow: 11, 16, 19, 22
get_eigenvalue(train_p)
train_pca = predict(train_p, newdata = train_num_s)
# Elbow: 11, 16, 19, 22
get_eigenvalue(train_p)
train_pca = train_pca[, 1:22]
train_pca = as.data.frame(train_pca)
nrow(train_pca) == nrow(train_num)
# Export PCs to profiling
write_csv(train_pca, "Subsets/train_pca.csv")
options(stringsAsFactors = FALSE)
library(tidyverse)
library(cluster)
library(factoextra)
type = read_csv("Subset/type_chr.csv")
type = read_csv("Subsets/type_chr.csv")
glimpse(type)
summary(type)
type = as.data.frame(type)
outlier = as.numeric(c("1299", "54", "524", "636", "186"))
type = type[-outliers, ]
type = type[-outlier, ]
glimpse(type)
summary(type)
type = as.data.frame(type)
num = read_csv("train_dbl_c.csv")
num = read_csv("Subsets/train_dbl_c.csv")
num = as.data.frame(num)
scale = read_csv("Subsets/scaleCol.csv")
scale = read_csv("Subsets/scale_fct.csv")
scale = scale[-outlier, ]
scale = as.data.frame(scale)
# factor type variables, not ordered
type8 = type %>% mutate_if(is.character, as.factor)
glimpse(type8)
# factor type variables, not ordered
typeFct = type %>% mutate_if(is.character, as.factor)
glimpse(scale)
scaleFct = as.factor(scale)
glimpse(scaleFct)
scaleFct[1]
library(tidyverse)
library(cluster)
library(factoextra)
type = read_csv("Subsets/type_chr.csv")
outlier = as.numeric(c("1299", "54", "524", "636", "186"))
type = type[-outlier, ]
glimpse(type)
summary(type)
type = as.data.frame(type)
num = read_csv("Subsets/train_dbl_c.csv")
num = as.data.frame(num)
summary(num)
glimpse(num)
scale = read_csv("Subsets/scale_fct.csv")
scale = scale[-outlier, ]
glimpse(scale)
scale = read_csv("Subsets/scale_fct.csv")
glimpse(scale)
## Convert scales to numeric
scaleCol = scale
## Systematically factored:
# LotShape: Reg = 4, IR1 = 3, IR2 = 2, IR1 = 1
scaleCol$LotShape = as.numeric(factor(scaleCol$LotShape))
scaleCol$LotShape = replace_na(scaleCol$LotShape, 0)
glimpse(scale)
glimpse(scaleCol)
train_orig = read_csv("Original Data/train.csv")
train = train_orig %>%
select(-SalePrice)
dim(train)
# Move `Id` to rownames, then delete
rownames(train) = train$Id
train = train %>% select(-Id)
chrName = c("MSZoning", "Street", "LotShape", "LandContour", "Utilities",
"LotConfig", "LandSlope", "Neighborhood", "Condition1", "Condition2",
"BldgType", "HouseStyle", "RoofStyle", "RoofMatl", "Exterior1st",
"Exterior2nd", "MasVnrType", "ExterQual", "ExterCond", "Foundation",
"BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinType2",
"Heating", "HeatingQC", "CentralAir", "Electrical", "KitchenQual",
"Functional", "FireplaceQu", "GarageType", "GarageFinish", "GarageQual",
"GarageCond", "PavedDrive", "PoolQC", "Fence", "MiscFeature",
"SaleType", "SaleCondition", "Alley", "MoSold")
chrCol = train %>% select(chrName)
glimpse(chrCol)
categName = c("MSZoning", "Street", "LandContour", "LotConfig", "Neighborhood", "Condition1",
"Condition2", "BldgType", "HouseStyle", "RoofStyle", "RoofMatl", "Exterior1st",
"Exterior2nd", "MasVnrType", "Foundation", "Heating", "GarageType",
"SaleType", "SaleCondition", "Alley", "Fence", "MiscFeature", "MoSold")
typeCol = chrCol %>%
select(categName)
scaleFct = chrCol %>%
select(-categName)
### Extract text columns ###
chrName = c("MSZoning", "Street", "LotShape", "LandContour", "Utilities",
"LotConfig", "LandSlope", "Neighborhood", "Condition1", "Condition2",
"BldgType", "HouseStyle", "RoofStyle", "RoofMatl", "Exterior1st",
"Exterior2nd", "MasVnrType", "ExterQual", "ExterCond", "Foundation",
"BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinType2",
"Heating", "HeatingQC", "CentralAir", "Electrical", "KitchenQual",
"Functional", "FireplaceQu", "GarageType", "GarageFinish", "GarageQual",
"GarageCond", "PavedDrive", "PoolQC", "Fence", "MiscFeature",
"SaleType", "SaleCondition", "Alley", "MoSold")
chrCol = train %>% select(chrName)
# Remove `SalePrice` column
train = train_orig %>%
select(-SalePrice)
train_orig = read_csv("Original Data/train.csv")
# Remove `SalePrice` column
train = train_orig %>%
select(-SalePrice)
glimpse(train_orig)
summary(train_orig)
# Remove `SalePrice` column
train = train_orig %>%
select(-SalePrice)
library(tidyverse)
library(skimr)
# Remove `SalePrice` column
train = train_orig %>%
select(-SalePrice)
dim(train)
options(stringsAsFactors = FALSE)
library(tidyverse)
library(skimr)
train_orig = read_csv("Original Data/train.csv")
summary(train_orig)
glimpse(train_orig)
skim(train_orig)
test_orig = read_csv("Original Data/test.csv")
# Remove `SalePrice` column
train = train_orig %>%
select(-SalePrice)
options(stringsAsFactors = FALSE)
library(tidyverse)
library(skimr)
train_orig = read_csv("Original Data/train.csv")
# Remove `SalePrice` column
train = train_orig %>%
select(-SalePrice)
