scaleFct_t$KitchenQual = factor(scaleFct_t$KitchenQual)
fct_explicit_na(scaleFct_t$KitchenQual, "NA")
ordered(scaleFct_t$KitchenQual, levels = c("Po", "Fa", "Ta", "Gd", "Ex"))
# FireplaceQu: Ex = 5, Gd = 4, TA = 3, Fa = 2, Po = 1, NA = 0
scaleFct_t$FireplaceQu = factor(scaleFct_t$FireplaceQu)
fct_explicit_na(scaleFct_t$FireplaceQu, "NA")
ordered(scaleFct_t$FireplaceQu, levels = c("NA", "Po", "Fa", "Ta", "Gd", "Ex"))
# GarageQual: Ex = 5, Gd = 4, TA = 3, Fa = 2, Po = 1, NA = 0
scaleFct_t$GarageQual = factor(scaleFct_t$GarageQual)
fct_explicit_na(scaleFct_t$GarageQual, "NA")
ordered(scaleFct_t$GarageQual, levels = c("NA", "Po", "Fa", "Ta", "Gd", "Ex"))
# GarageCond: Ex = 5, Gd = 4, TA = 3, Fa = 2, Po = 1, NA = 0
scaleFct_t$GarageCond = factor(scaleFct_t$GarageCond)
fct_explicit_na(scaleFct_t$GarageCond, "NA")
ordered(scaleFct_t$GarageCond, levels = c("NA", "Po", "Fa", "Ta", "Gd", "Ex"))
# PoolQC: Ex = 4, Fa = 1, Gd = 3, NA = 0, TA = 2
scaleFct_t$PoolQC = factor(scaleFct_t$PoolQC)
fct_explicit_na(scaleFct_t$PoolQC, "NA")
ordered(scaleFct_t$PoolQC, levels = c("NA", "Fa", "TA","Gd", "Ex"))
# Utilities: AllPub = 4, NoSewr = 3, NoSeWa = 2, ELO = 1
scaleFct_t$Utilities = factor(scaleFct_t$Utilities)
fct_explicit_na(scaleFct_t$Utilities, "NA")
ordered(scaleFct_t$Utilities, levels = c("ELO", "NoSeWa", "NoSewr", "AllPub"))
# BsmtFinType1: GLQ = 6, ALQ = 5, BLQ = 4, Rec = 3, LwQ = 2, Unf = 1, NA = 0
scaleFct_t$BsmtFinType1 = factor(scaleFct_t$BsmtFinType1)
fct_explicit_na(scaleFct_t$BsmtFinType1, "NA")
ordered(scaleFct_t$BsmtFinType1, levels = c("NA", "Unf", "LwQ", "Rec", "BLQ", "ALQ", "GLQ"))
# BsmtFinType2: GLQ = 6, ALQ = 5, BLQ = 4, Rec = 3, LwQ = 2, Unf = 1, NA = 0
scaleFct_t$BsmtFinType2 = factor(scaleFct_t$BsmtFinType2)
fct_explicit_na(scaleFct_t$BsmtFinType2, "NA")
ordered(scaleFct_t$BsmtFinType2, levels = c("NA", "Unf", "LwQ", "Rec", "BLQ", "ALQ", "GLQ"))
# Electrical: SBrkr = 5, FuseA = 4, FuseF = 3, FuseP = 2, Mix = 1, NA = 0
scaleFct_t$Electrical = factor(scaleFct_t$Electrical)
fct_explicit_na(scaleFct_t$Electrical, "NA")
ordered(scaleFct_t$Electrical, levels = c("NA", "Mix", "FuseP", "FuseF", "FuseA", "SBrkr"))
# Functional: Typ = 8, Min1 = 7, Min2 = 6, Mod = 5, Maj1 = 4, Maj2 = 3, Sev = 2, Sal = 1
scaleFct_t$Functional = factor(scaleFct_t$Functional)
fct_explicit_na(scaleFct_t$Functional, "NA")
ordered(scaleFct_t$Functional, levels = c("Sal", "Sev", "Maj2", "Maj1", "Mod", "Min2", "Min1", "Typ"))
# GarageFinish: RFn = 3, Fin = 2, Unf = 1, NA = 0
scaleFct_t$GarageFinish = factor(scaleFct_t$GarageFinish)
fct_explicit_na(scaleFct_t$GarageFinish, "NA")
ordered(scaleFct_t$GarageFinish, levels = c("NA", "Unf", "Fin", "RFn"))
# PavedDrive: Y = 3, P = 2, N = 1
scaleFct_t$PavedDrive = factor(scaleFct_t$PavedDrive)
fct_explicit_na(scaleFct_t$PavedDrive, "NA")
ordered(scaleFct_t$PavedDrive, levels = c("NA", "N", "P", "Y", "Mod"))
test %>% select(-chrName) %>% glimpse()
scaleName = c("OverallQual", "OverallCond")
scaleNum_t = test %>% select(scaleName)
scaleNum_t$OverallQual = factor(scaleNum_t$OverallQual)
fct_explicit_na(scaleNum_t$OverallQual, "0")
ordered(scaleNum_t$OverallQual, levels = c("0", "1", "2", "3", "4", "5",
"6", "7", "8", "9", "10"))
scaleNum_t$OverallCond = factor(scaleNum_t$OverallCond)
fct_explicit_na(scaleNum_t$OverallCond, "0")
ordered(scaleNum_t$OverallCond, levels = c("0", "1", "2", "3", "4", "5",
"6", "7", "8", "9", "10"))
scaleFct_t = cbind(scaleFct_t, scaleNum_t)
glimpse(scaleFct_t)
skim(scaleFct_t)
test %>% select(-chrName, -scaleName) %>% glimpse() -> test_num
### Missing Values ###
skim(typeCol_t)
# Replace NAs with "N/A" as a new type
typeCol_t[is.na(typeCol_t)] = "N/A"
# Convert months to quarters
quart = function(x) {
if (x %in% c(1, 2, 3)) {
Quarter = "I"
} else if (x %in% c(4, 5, 6)){
Quarter = "II"
} else if (x %in% c(7, 8, 9)) {
Quarter = "III"
} else {
Quarter = "IV"
}
return(Quarter)
}
typeCol_t$Quarter = map_chr(typeCol_t$MoSold, quart)
typeCol_t$Quarter
typeCol_t = typeCol_t %>% select(-MoSold)
skim(typeCol_t)
# Numeric variables: Replace with mean
skim(test_num)
summary(test_num)
# Replace NA with colmean
test_num = test_num %>%
mutate_all(~ifelse(is.na(.x), mean(.x, na.rm = TRUE), .x))
# Parse years to ages
# Age of Garage when sold
test_num = test_num %>%
mutate(GarageAge = test_num$YrSold - test_num$GarageYrBlt)
# Age of House when sold
test_num = test_num %>%
mutate(Age = test_num$YrSold - test_num$YearBuilt)
# Age of house after reconstruction (if applicable)
test_num = test_num %>%
mutate(RemodAge = test_num$YrSold - test_num$YearRemodAdd)
summary(test_num)
# remove the year column
test_num = test_num %>%
select(-YearBuilt, -GarageYrBlt, -YearRemodAdd)
ncol(test_num)
ncol(scaleFct_t)
ncol(typeCol_t)
write_csv(test_num, "Test/test_dbl.csv")           # <dbl>
write_csv(scaleFct_t, "Test/scale_fct_test.csv")     # <fct>
write_csv(typeCol_t, "Test/type_chr_test.csv")       # <chr>
test_num = read.csv("Test/test_dbl.csv.csv")
test_num = read.csv("Test/test_dbl.csv")
summary(test_num)
class(test_num)
options(stringsAsFactors=FALSE)
options(digits=3)
library(tidyverse)
library(factoextra)
library(skimr)
library("corrplot")
library(gridExtra)
train_num = read.csv("Subsets/train_n.csv")
train_num_s = scale(train_num)
train_p=prcomp(train_num_s,center=TRUE,scale=TRUE)
test_pca = predict(train_p, newdata = test_num)
test_pca = as.data.frame(test_pca)
test_pca = test_pca[, 1:22]
nrow(test_pca) == nrow(test_num)
glimpse(test_pca)
options(stringsAsFactors = FALSE)
library(tidyverse)
library(cluster)
library(factoextra)
library(fpc)
glimpse(typeCol_t)
typeFct_t = typeCol_t %>% mutate_if(is.character, as.factor)
glimpse(typeFct_t)
glimpse(scaleFct_t)
glimpse(test_num)
new_test = cbind(typeFct_t, caleFct_t, test_num)
new_test = cbind(typeFct_t, scaleFct_t, test_num)
dim(new_test)
glimpse(new_test)
pam2$id.med
type = read.csv("Subsets/type_chr.csv")
outlier = as.numeric(c("1299", "54", "524", "636", "186"))
type = type[-outlier, ]
glimpse(type)
summary(type)
num = read.csv("Subsets/train_n.csv")
options(stringsAsFactors = FALSE)
# Refer:
# https://www.kaggle.com/erikbruin/house-prices-lasso-xgboost-and-a-detailed-eda
# ----------------------------- #
library(tidyverse)
library(skimr)
train_orig = read_csv("Original Data/train.csv")
summary(train_orig)
glimpse(train_orig)
skim(train_orig)
# ----------------------------- #
##### Data Cleaning #####
# Remove `SalePrice` column
train = train_orig %>%
select(-SalePrice)
dim(train)
# Move `Id` to rownames, then delete
rownames(train) = train$Id
train = train %>% select(-Id)
### Extract text columns ###
chrName = c("MSZoning", "Street", "LotShape", "LandContour", "Utilities",
"LotConfig", "LandSlope", "Neighborhood", "Condition1", "Condition2",
"BldgType", "HouseStyle", "RoofStyle", "RoofMatl", "Exterior1st",
"Exterior2nd", "MasVnrType", "ExterQual", "ExterCond", "Foundation",
"BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinType2",
"Heating", "HeatingQC", "CentralAir", "Electrical", "KitchenQual",
"Functional", "FireplaceQu", "GarageType", "GarageFinish", "GarageQual",
"GarageCond", "PavedDrive", "PoolQC", "Fence", "MiscFeature",
"SaleType", "SaleCondition", "Alley", "MoSold")
chrCol = train %>% select(chrName)
glimpse(chrCol)
categName = c("MSZoning", "Street", "LandContour", "LotConfig", "Neighborhood", "Condition1",
"Condition2", "BldgType", "HouseStyle", "RoofStyle", "RoofMatl", "Exterior1st",
"Exterior2nd", "MasVnrType", "Foundation", "Heating", "GarageType",
"SaleType", "SaleCondition", "Alley", "Fence", "MiscFeature", "MoSold")
typeCol = chrCol %>%
select(categName)
scaleFct = chrCol %>%
select(-categName)
### Convert scale-like character variables into factors ###
# LotShape: Reg = 4, IR1 = 3, IR2 = 2, IR1 = 1
scaleFct$LotShape = factor(scaleFct$LotShape)
fct_explicit_na(scaleFct$LotShape, "NA")
ordered(scaleFct$LotShape, levels = c("IR1", "IR2", "IR3", "Reg"))
# LandSlope: Gtl = 1, Mod = 2, Sev = 3
scaleFct$LandSlope = factor(scaleFct$LandSlope)
fct_explicit_na(scaleFct$LandSlope, "NA")
ordered(scaleFct$LandSlope, levels = c("Gtl", "Mod", "Sev"))
# ExterQual: Ex = 5, Gd = 4, TA = 3, Fa = 2, Po = 1
scaleFct$ExterQual = factor(scaleFct$ExterQual)
fct_explicit_na(scaleFct$ExterQual, "NA")
ordered(scaleFct$ExterQual, levels = c("Po", "Fa", "TA", "Gd", "Ex"))
# ExterCond: TA = 3, Gd = 4, Fa = 2, Po = 1, Ex = 5
scaleFct$ExterCond = factor(scaleFct$ExterCond)
fct_explicit_na(scaleFct$ExterCond, "NA")
ordered(scaleFct$ExterCond, levels = c("Po", "Fa", "TA", "Gd", "Ex"))
# BsmtQual: Ex = 5, TA = 3, Gd = 4, FA = 2, Po = 1, NA = 0
scaleFct$BsmtQual = factor(scaleFct$BsmtQual)
fct_explicit_na(scaleFct$BsmtQual, "NA")
ordered(scaleFct$BsmtQual, levels = c("NA", "Po", "Fa", "TA", "Gd", "Ex"))
# BsmtCond: Ex = 5, TA = 3, Gd = 4, FA = 2, Po = 1, NA = 0
scaleFct$BsmtCond = factor(scaleFct$BsmtCond)
fct_explicit_na(scaleFct$BsmtCond, "NA")
ordered(scaleFct$BsmtCond, levels = c("NA", "Po", "Fa", "TA", "Gd", "Ex"))
# BsmtExposure: No = 1, Mn = 2, Gd = 4, Av = 3, NA = 0
scaleFct$BsmtExposure = factor(scaleFct$BsmtExposure)
fct_explicit_na(scaleFct$BsmtExposure, "NA")
ordered(scaleFct$BsmtExposure, levels = c("NA", "No", "Mn", "Av", "Gd"))
# HeatingQC: TA = 3, Gd = 4, Fa = 2, Po = 1, Ex = 5
scaleFct$HeatingQC = factor(scaleFct$HeatingQC)
fct_explicit_na(scaleFct$HeatingQC, "NA")
ordered(scaleFct$HeatingQC, levels = c("Po", "Fa", "TA", "Gd", "Ex"))
# CentralAir: Y = 2, N = 1
scaleFct$CentralAir = factor(scaleFct$CentralAir)
fct_explicit_na(scaleFct$CentralAir, "NA")
ordered(scaleFct$CentralAir, levels = c("N", "Y"))
# KitchenQual:   Ex = 5, Gd = 4, TA = 3, Fa = 2, Po = 1
scaleFct$KitchenQual = factor(scaleFct$KitchenQual)
fct_explicit_na(scaleFct$KitchenQual, "NA")
ordered(scaleFct$KitchenQual, levels = c("Po", "Fa", "Ta", "Gd", "Ex"))
# FireplaceQu: Ex = 5, Gd = 4, TA = 3, Fa = 2, Po = 1, NA = 0
scaleFct$FireplaceQu = factor(scaleFct$FireplaceQu)
fct_explicit_na(scaleFct$FireplaceQu, "NA")
ordered(scaleFct$FireplaceQu, levels = c("NA", "Po", "Fa", "Ta", "Gd", "Ex"))
# GarageQual: Ex = 5, Gd = 4, TA = 3, Fa = 2, Po = 1, NA = 0
scaleFct$GarageQual = factor(scaleFct$GarageQual)
fct_explicit_na(scaleFct$GarageQual, "NA")
ordered(scaleFct$GarageQual, levels = c("NA", "Po", "Fa", "Ta", "Gd", "Ex"))
# GarageCond: Ex = 5, Gd = 4, TA = 3, Fa = 2, Po = 1, NA = 0
scaleFct$GarageCond = factor(scaleFct$GarageCond)
fct_explicit_na(scaleFct$GarageCond, "NA")
ordered(scaleFct$GarageCond, levels = c("NA", "Po", "Fa", "Ta", "Gd", "Ex"))
# PoolQC: Ex = 4, Fa = 1, Gd = 3, NA = 0, TA = 2
scaleFct$PoolQC = factor(scaleFct$PoolQC)
fct_explicit_na(scaleFct$PoolQC, "NA")
ordered(scaleFct$PoolQC, levels = c("NA", "Fa", "TA","Gd", "Ex"))
# Utilities: AllPub = 4, NoSewr = 3, NoSeWa = 2, ELO = 1
scaleFct$Utilities = factor(scaleFct$Utilities)
fct_explicit_na(scaleFct$Utilities, "NA")
ordered(scaleFct$Utilities, levels = c("ELO", "NoSeWa", "NoSewr", "AllPub"))
# BsmtFinType1: GLQ = 6, ALQ = 5, BLQ = 4, Rec = 3, LwQ = 2, Unf = 1, NA = 0
scaleFct$BsmtFinType1 = factor(scaleFct$BsmtFinType1)
fct_explicit_na(scaleFct$BsmtFinType1, "NA")
ordered(scaleFct$BsmtFinType1, levels = c("NA", "Unf", "LwQ", "Rec", "BLQ", "ALQ", "GLQ"))
# BsmtFinType2: GLQ = 6, ALQ = 5, BLQ = 4, Rec = 3, LwQ = 2, Unf = 1, NA = 0
scaleFct$BsmtFinType2 = factor(scaleFct$BsmtFinType2)
fct_explicit_na(scaleFct$BsmtFinType2, "NA")
ordered(scaleFct$BsmtFinType2, levels = c("NA", "Unf", "LwQ", "Rec", "BLQ", "ALQ", "GLQ"))
# Electrical: SBrkr = 5, FuseA = 4, FuseF = 3, FuseP = 2, Mix = 1, NA = 0
scaleFct$Electrical = factor(scaleFct$Electrical)
fct_explicit_na(scaleFct$Electrical, "NA")
ordered(scaleFct$Electrical, levels = c("NA", "Mix", "FuseP", "FuseF", "FuseA", "SBrkr"))
# Functional: Typ = 8, Min1 = 7, Min2 = 6, Mod = 5, Maj1 = 4, Maj2 = 3, Sev = 2, Sal = 1
scaleFct$Functional = factor(scaleFct$Functional)
fct_explicit_na(scaleFct$Functional, "NA")
ordered(scaleFct$Functional, levels = c("Sal", "Sev", "Maj2", "Maj1", "Mod", "Min2", "Min1", "Typ"))
# GarageFinish: RFn = 3, Fin = 2, Unf = 1, NA = 0
scaleFct$GarageFinish = factor(scaleFct$GarageFinish)
fct_explicit_na(scaleFct$GarageFinish, "NA")
ordered(scaleFct$GarageFinish, levels = c("NA", "Unf", "Fin", "RFn"))
# PavedDrive: Y = 3, P = 2, N = 1
scaleFct$PavedDrive = factor(scaleFct$PavedDrive)
fct_explicit_na(scaleFct$PavedDrive, "NA")
ordered(scaleFct$PavedDrive, levels = c("NA", "N", "P", "Y", "Mod"))
# Extraxt other numeric scale variables
train %>% select(-chrName) %>% glimpse()
scaleName = c("OverallQual", "OverallCond")
scaleNum = train %>% select(scaleName)
scaleNum$OverallQual = factor(scaleNum$OverallQual)
fct_explicit_na(scaleNum$OverallQual, "0")
ordered(scaleNum$OverallQual, levels = c("0", "1", "2", "3", "4", "5",
"6", "7", "8", "9", "10"))
scaleNum$OverallCond = factor(scaleNum$OverallCond)
fct_explicit_na(scaleNum$OverallCond, "0")
ordered(scaleNum$OverallCond, levels = c("0", "1", "2", "3", "4", "5",
"6", "7", "8", "9", "10"))
scaleFct = cbind(scaleFct, scaleNum)
glimpse(scaleFct)
skim(scaleFct)
# which(is.na(scaleFct), arr.ind=TRUE)
# row 1380 has NA, decided to add NA as a category
train %>% select(-chrName, -scaleName) %>% glimpse() -> train_num
### Missing Values ###
skim(typeCol)
# Replace NAs with "N/A" as a new type
typeCol[is.na(typeCol)] = "N/A"
# Convert months to quarters
quart = function(x) {
if (x %in% c(1, 2, 3)) {
Quarter = "I"
} else if (x %in% c(4, 5, 6)){
Quarter = "II"
} else if (x %in% c(7, 8, 9)) {
Quarter = "III"
} else {
Quarter = "IV"
}
return(Quarter)
}
typeCol$Quarter = map_chr(typeCol$MoSold, quart)
typeCol$Quarter
typeCol = typeCol %>% select(-MoSold)
skim(typeCol)
# Numeric variables: Replace with mean
skim(train_num)
summary(train_num)
test_num = test_num %>%
mutate_all(~ifelse(is.na(.x), mean(.x, na.rm = TRUE), .x))
# Parse years to ages
# Age of Garage when sold
train_num = train_num %>%
mutate(GarageAge = train_num$YrSold - train_num$GarageYrBlt)
# Age of House when sold
train_num = train_num %>%
mutate(Age = train_num$YrSold - train_num$YearBuilt)
# Age of house after reconstruction (if applicable)
train_num = train_num %>%
mutate(RemodAge = train_num$YrSold - train_num$YearRemodAdd)
summary(train_num)
# remove the year column
train_num = train_num %>%
select(-YearBuilt, -GarageYrBlt, -YearRemodAdd)
ncol(train_num)
ncol(scaleFct)
ncol(typeCol)
write_csv(train_num, "Subsets/train_dbl.csv")    # <dbl>
write_csv(scaleFct, "Subsets/scale_fct.csv")     # <fct>
write_csv(typeCol, "Subsets/type_chr.csv")       # <chr>
## Pattern Discovery
# EFA: uncover patterns in scale features
# Kmeans: detect outliers
## Dimention Reduction
# PCA: reduce numeric variable dimensions
# PAM: assign clusers to non-numeric variables
# Modeling: `train_num` + all scales that can be factored
#   Random Forest
#   Boosting
# factor type variables, not ordered
typeFct = type %>% mutate_if(is.character, as.factor)
## Cheating from DataCleaning File!!
scale8 = scaleFct[-outlier, ]
new_train = cbind(typeFct, scale8, num)
dim(new_train)
glimpse(new_train)
diss_dist = daisy(new_train, metric = c("gower"))
pam2 = pam(diss_dist, 2)
pam2$id.med
pam2$id.med
pam2$medoids
pam2$clustering
pam2$objective
pam2$medoids
pam2$id.med
summary(pam2)
pam2$id.med
pam2$clustering[1237]
pam2$clustering[836]
dist_t = daisy(new_test, metric = c("gower"))
diss_dist[1237]
diss_dist[840]
?dist
class(pam2$id.med)
# Look at the centers of PAM model
index = pam2$id.med
diss_dist
View(diss_dist)
View(as.data.frame(diss_dist))
View(as.matrix(diss_dist))
# Extract corresponsing rows from `new_train`
new_train[index, ]
# Extract corresponsing rows from `new_train`
center = new_train[index, ]
dim(center)
dim(as.matrix(diss_dist))
View(as.matrix(diss_dist)[1:10, 1:10])
dim(center)
# Look at the centers of PAM model
summary(pam2)
# Extract corresponsing rows from `new_train`
center = new_train[index, ]
rownames(center)
rownames(center) = c("1", "2")
rownames(center)
library(gower)
# Calculate gower distance between test set and centers
test_dist = gower_dist(new_test, center)
head(new_test)
levels(new_test)
levels(center)
# Calculate gower distance between test set and centers
test_dist = gower_dist(data.x = new_test, data.y = center)
# Calculate gower distance between test set and centers
gower_df = rbind(test_num, center)
colnames(test_num)
ncol(test_num)
# Calculate gower distance between test set and centers
gower_df = rbind(new_test, center)
test_dist = gower_dist(gower_df)
test_dist = gower_dist(gower_df)
class(gower_df)
# Calculate gower distance between test set and centers
gower_df = rbind(new_test, center)
test_dist = gower_dist(gower_df)
test_dist = gower_dist(data.c = gower_df, data.y=data.x)
test_dist = daisy(gower_df, metric = c("gower"))
dim(test_dist)
dim(as.matrix(test_dist))
which.min(test_dist[1460, 1], test_dist[1461, 1])
min(test_dist[1460, 1], test_dist[1461, 1])
test_dist[1460, 1]
test_mat = as.matrix(test_dist)
test_mat[1460, 1]
test_mat[1461, 1]
min(test_mat[1460, 1], test_mat[1461, 1])
which.min(test_mat[1460, 1], test_mat[1461, 1])
min = min(test_mat[1460, 1], test_mat[1461, 1])
clus_t = c()
ifelse(min == test_mat[1460, 1], clus_t = 1, clus_t = 2)
ifelse(min == test_mat[1460, 1], 1, 2)
clus_t = c()
min = min(test_mat[1460, 1], test_mat[1461, 1])
clus_t = ifelse(min == test_mat[1460, 1], 1, 2)
test_mat[1460, 2]
test_mat[1461, 2]
min = min(test_mat[1460, 2], test_mat[1461, 2])
ifelse(min == test_mat[1460, 2], 1, 2)
clus_t = ifelse(min == test_mat[1460, 2], 1, 2)
clus_t
clus_t = as.numeric()
min = min(test_mat[1460, 1], test_mat[1461, 1])
clus_t = ifelse(min == test_mat[1460, 1], 1, 2)
min = min(test_mat[1460, 2], test_mat[1461, 2])
clus_t = ifelse(min == test_mat[1460, 2], 1, 2)
clus_t
clus_t = c()
min = min(test_mat[1460, 1], test_mat[1461, 1])
clus_t[1] = ifelse(min == test_mat[1460, 1], 1, 2)
min = min(test_mat[1460, 2], test_mat[1461, 2])
clus_t[2] = ifelse(min == test_mat[1460, 2], 1, 2)
clus_t
clus_t = c()
for(i in 1:1459) {
min = min(test_mat[1460, i], test_mat[1461, i])
clus_t[i] = ifelse(min == test_mat[1460, i], 1, 2)
}
clus_t
clus_t = c()
min = min(test_mat[1460, 1], test_mat[1461, 1])
clus_t[1] = ifelse(min == test_mat[1460, 1], 1, 2)
min = min(test_mat[1460, 2], test_mat[1461, 2])
clus_t[2] = ifelse(min == test_mat[1460, 2], 1, 2)
test_mat[1460, 3]
test_mat[1461, 3]
min = min(test_mat[1460, 3], test_mat[1461, 3])
clus_t[3] = ifelse(min == test_mat[1460, 3], 1, 2)
clus_t
# Compare the dissimilarity values from centers
# assign closer centers(clusters) to test observations
clus_t = c()
for(i in 1:1459) {
min = min(test_mat[1460, i], test_mat[1461, i])
clus_t[i] = ifelse(min == test_mat[1460, i], 1, 2)
}
clus_t
# Combine clusters to test_pca
test_df = cbind(test_pca, clus_t)
dim(test_df)
dim(train_df)
glimpse(test_df)
test_num_s = scale(test_num)
test_pca = predict(train_p, newdata = test_num_s)
test_pca = as.data.frame(test_pca)
test_pca = test_pca[, 1:22]
glimpse(typeCol_t)
typeFct_t = typeCol_t %>% mutate_if(is.character, as.factor)
glimpse(scaleFct_t)
glimpse(test_num)
new_test = cbind(typeFct_t, scaleFct_t, test_num)
dim(new_test)
glimpse(new_test)
# Look at the centers of PAM model
summary(pam2)
index = pam2$id.med
# Extract corresponsing rows from `new_train`
center = new_train[index, ]
rownames(center) = c("1", "2")
dim(center)
# Calculate gower distance between test set and centers
gower_df = rbind(new_test, center)
test_dist = daisy(gower_df, metric = c("gower"))
test_mat = as.matrix(test_dist)
# Compare the dissimilarity values from centers
# assign closer centers(clusters) to test observations
clus_t = c()
for(i in 1:1459) {
min = min(test_mat[1460, i], test_mat[1461, i])
clus_t[i] = ifelse(min == test_mat[1460, i], 1, 2)
}
clus_t
# Combine clusters to test_pca
test_df = cbind(test_pca, clus_t)
dim(test_df)
glimpse(test_df)
